"use strict";var precacheConfig=[["/GenPingYuan/dazhongdianping.git/build/static/css/main.f8e42e8f.css","1059fe059769c65d437c9e3017e7cb70"],["/GenPingYuan/dazhongdianping.git/build/static/js/main.1cbec809.js","e6e6b512ad001e652c76b17bf0dcfd4c"],["/GenPingYuan/dazhongdianping.git/index.html","179ef50239a3ce45c3a66c0b51d45109"],["/GenPingYuan/dazhongdianping.git/static/media/style.0aaa1a3e.sass","0aaa1a3e4ed81abbe56dd3b43c866865"],["/GenPingYuan/dazhongdianping.git/static/media/style.1b777797.sass","1b777797cdef082f58e4b9b92f0712f5"],["/GenPingYuan/dazhongdianping.git/static/media/style.26603c16.sass","26603c16e6154e754f9e1174034878b0"],["/GenPingYuan/dazhongdianping.git/static/media/style.5035028e.sass","5035028e3b94a8d90bb7a89100d2bf71"],["/GenPingYuan/dazhongdianping.git/static/media/style.6a0c58ba.sass","6a0c58ba8c76a07f0bb905c03160295d"],["/GenPingYuan/dazhongdianping.git/static/media/style.7686734c.sass","7686734c70fd72ff8aceb6344fd8141f"],["/GenPingYuan/dazhongdianping.git/static/media/style.7cb08f29.sass","7cb08f299ec7a20cc1864b9106deb74a"],["/GenPingYuan/dazhongdianping.git/static/media/style.7f5a3daf.sass","7f5a3daf1ebe5e2b4c53cf76cf86a2b1"],["/GenPingYuan/dazhongdianping.git/static/media/style.ceedefce.sass","ceedefcee22c289ee3f285dff0107d16"],["/GenPingYuan/dazhongdianping.git/static/media/style.d46644c8.sass","d46644c88d9881fa2dbad003e651479b"],["/GenPingYuan/dazhongdianping.git/static/media/style.ee739ae6.sass","ee739ae6b4e07b02623c8ef04b571939"],["/GenPingYuan/dazhongdianping.git/static/media/style.eefef371.sass","eefef371a9ec16ee5c179b1e6b1fd044"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,n){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=n),a.toString()},cleanResponse=function(n){return n.redirected?("body"in n?Promise.resolve(n.body):n.blob()).then(function(e){return new Response(e,{headers:n.headers,status:n.status,statusText:n.statusText})}):Promise.resolve(n)},createCacheKey=function(e,n,a,t){var i=new URL(e);return t&&i.pathname.match(t)||(i.search+=(i.search?"&":"")+encodeURIComponent(n)+"="+encodeURIComponent(a)),i.toString()},isPathWhitelisted=function(e,n){if(0===e.length)return!0;var a=new URL(n).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,a){var n=new URL(e);return n.hash="",n.search=n.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(n){return a.every(function(e){return!e.test(n[0])})}).map(function(e){return e.join("=")}).join("&"),n.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var n=e[0],a=e[1],t=new URL(n,self.location),i=createCacheKey(t,hashParamName,a,/\.\w{8}\./);return[t.toString(),i]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(t){return setOfCachedUrls(t).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(n){if(!a.has(n)){var e=new Request(n,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+n+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return t.put(n,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(n){return n.keys().then(function(e){return Promise.all(e.map(function(e){if(!a.has(e.url))return n.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(n){if("GET"===n.request.method){var e,a=stripIgnoredUrlParameters(n.request.url,ignoreUrlParametersMatching),t="index.html";(e=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,t),e=urlsToCacheKeys.has(a));var i="/GenPingYuan/dazhongdianping.git/index.html";!e&&"navigate"===n.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],n.request.url)&&(a=new URL(i,self.location).toString(),e=urlsToCacheKeys.has(a)),e&&n.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',n.request.url,e),fetch(n.request)}))}});